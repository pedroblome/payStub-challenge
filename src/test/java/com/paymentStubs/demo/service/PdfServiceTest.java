package com.paymentStubs.demo.service;

import com.paymentStubs.demo.dto.PayrollData;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.context.MessageSource;

import java.io.IOException;
import java.util.Locale;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class PdfServiceTest {

    @Mock
    private MessageSource messageSource;

    @InjectMocks
    private PdfService pdfService;

    private PayrollData testData;

    @BeforeEach
    void setUp() {
        testData = new PayrollData();
        testData.setFullName("John Doe");
        testData.setEmail("john.doe@example.com");
        testData.setPosition("Software Engineer");
        testData.setPeriod("2025-09-15");
        testData.setGrossSalary(5000.0);
        testData.setGrossPayment(5200.0);
        testData.setHealthDiscountAmount(100.0);
        testData.setSocialDiscountAmount(150.0);
        testData.setTaxesDiscountAmount(800.0);
        testData.setOtherDiscountAmount(50.0);
        testData.setNetPayment(4100.0);

        lenient().when(messageSource.getMessage(eq("paystub.title"), any(), eq(Locale.US)))
                .thenReturn("Paystub Payment {0}");
        lenient().when(messageSource.getMessage(eq("paystub.gross_salary"), any(), eq(Locale.US)))
                .thenReturn("Gross Salary");
        lenient().when(messageSource.getMessage(eq("paystub.footer"), any(), eq(Locale.US)))
                .thenReturn("This document was generated by the system.");
        lenient().when(messageSource.getMessage(eq("paystub.net_payment"), any(), eq(Locale.US)))
                .thenReturn("Net Payment");

        Locale spanishDO = new Locale("es", "DO");
        lenient().when(messageSource.getMessage(eq("paystub.title"), any(), eq(spanishDO)))
                .thenReturn("Comprobante de Pago {0}");
        lenient().when(messageSource.getMessage(eq("paystub.gross_salary"), any(), eq(spanishDO)))
                .thenReturn("Salario Bruto");
        lenient().when(messageSource.getMessage(eq("paystub.footer"), any(), eq(spanishDO)))
                .thenReturn("Este documento fue generado por el sistema.");
        lenient().when(messageSource.getMessage(eq("paystub.net_payment"), any(), eq(spanishDO)))
                .thenReturn("Pago Neto");
    }

    @Test
    @DisplayName("Should generate a valid PDF in English when country is 'en'")
    void generatePdfInEnglish() throws IOException {
        String company = "atdev";
        String country = "en";

        byte[] pdfBytes = pdfService.generate(testData, company, country);

        assertNotNull(pdfBytes);
        assertTrue(pdfBytes.length > 0);

        verify(messageSource, atLeastOnce()).getMessage(anyString(), any(), eq(Locale.US));
    }

    @Test
    @DisplayName("Should generate a valid PDF in Spanish when country is 'es'")
    void generatePdfInSpanish() throws IOException {
        String company = "atdev";
        String country = "es";

        byte[] pdfBytes = pdfService.generate(testData, company, country);

        assertNotNull(pdfBytes);
        assertTrue(pdfBytes.length > 0);

        verify(messageSource, atLeastOnce()).getMessage(anyString(), any(), eq(new Locale("es", "DO")));
    }

    @Test
    @DisplayName("Should use default logo when company logo is not found")
    void generatePdfWithFallbackLogo() {
        String company = "nonexistent_company";
        String country = "en";

        assertDoesNotThrow(() -> {
            pdfService.generate(testData, company, country);
        });
    }
}
